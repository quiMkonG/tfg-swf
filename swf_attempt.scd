(
var vertices2;
var matrix_A1, matrix_A0, matrix_B1, matrix_B0, matrix_Q0, matrix_Q1, matrix_P0, matrix_P1;
var c1, c0, d1, d0;
var matrices, triplet_amount, triplet_iterator;
var inverse_matrices;
var x_coordinates, y_coordinates, z_coordinates;
var p0;
var atorad = (2 * 3.1415927 / 360);
var temporal_gains, best_neg_g_am, big_sm_g, gains, power, winner_set;
var triplet_indices;
var azi, ele;
var channel_gains;
var aux;
	vertices2 = [ [ 1.000000e+00, -1.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.071068e-01, -7.071068e-01, 7.071068e-01, -7.071068e-01, 7.071068e-01, -7.071068e-01, 0.000000e+00, 0.000000e+00, 7.071068e-01, -7.071068e-01, 0.000000e+00, 0.000000e+00, 9.546413e-01, 2.977582e-01, -9.546413e-01, -2.977582e-01, 9.546413e-01, 2.977582e-01, -9.546413e-01, -2.977582e-01, 9.546413e-01, 2.977582e-01, 7.859631e-01, 7.859631e-01, -9.546413e-01, -2.977582e-01, -7.859631e-01, -7.859631e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 4.371853e-01, -4.371853e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 4.371853e-01, -4.371853e-01, 9.546413e-01, 2.977582e-01, 7.859631e-01, 7.859631e-01, -9.546413e-01, -2.977582e-01, -7.859631e-01, -7.859631e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 4.371853e-01, -4.371853e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 4.371853e-01, -4.371853e-01 ],
		[ 0.000000e+00, 0.000000e+00, 1.000000e+00, -1.000000e+00, 0.000000e+00, 0.000000e+00, 7.071068e-01, 7.071068e-01, -7.071068e-01, -7.071068e-01, 0.000000e+00, 0.000000e+00, 7.071068e-01, -7.071068e-01, 0.000000e+00, 0.000000e+00, 7.071068e-01, -7.071068e-01, 2.977582e-01, 9.546413e-01, 2.977582e-01, 9.546413e-01, -2.977582e-01, -9.546413e-01, -2.977582e-01, -9.546413e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 9.546413e-01, 2.977582e-01, 7.859631e-01, 7.859631e-01, 4.371853e-01, 4.371853e-01, -9.546413e-01, -2.977582e-01, -7.859631e-01, -7.859631e-01, -4.371853e-01, -4.371853e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 0.000000e+00, 0.000000e+00, 4.371853e-01, -4.371853e-01, 9.546413e-01, 2.977582e-01, 7.859631e-01, 7.859631e-01, 4.371853e-01, 4.371853e-01, -9.546413e-01, -2.977582e-01, -7.859631e-01, -7.859631e-01, -4.371853e-01, -4.371853e-01 ],
		[ 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 1.000000e+00, -1.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 7.071068e-01, 7.071068e-01, 7.071068e-01, 7.071068e-01, -7.071068e-01, -7.071068e-01, -7.071068e-01, -7.071068e-01, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 0.000000e+00, 2.977582e-01, 9.546413e-01, 4.371853e-01, 4.371853e-01, 2.977582e-01, 9.546413e-01, 4.371853e-01, 4.371853e-01, 2.977582e-01, 9.546413e-01, 4.371853e-01, 4.371853e-01, 7.859631e-01, 7.859631e-01, 2.977582e-01, 9.546413e-01, 4.371853e-01, 4.371853e-01, 7.859631e-01, 7.859631e-01, -2.977582e-01, -9.546413e-01, -4.371853e-01, -4.371853e-01, -2.977582e-01, -9.546413e-01, -4.371853e-01, -4.371853e-01, -2.977582e-01, -9.546413e-01, -4.371853e-01, -4.371853e-01, -7.859631e-01, -7.859631e-01, -2.977582e-01, -9.546413e-01, -4.371853e-01, -4.371853e-01, -7.859631e-01, -7.859631e-01 ] ];

triplet_indices = [ [ "0", "18", "26" ], [ "0", "18", "46" ], [ "0", "22", "26" ], [ "0", "22", "46" ], [ "1", "24", "30" ], [ "1", "24", "50" ], [ "1", "20", "30" ], [ "1", "20", "50" ], [ "2", "21", "34" ], [ "2", "21", "54" ], [ "2", "19", "34" ], [ "2", "19", "54" ], [ "3", "23", "40" ], [ "3", "23", "60" ], [ "3", "25", "40" ], [ "3", "25", "60" ], [ "4", "27", "35" ], [ "4", "27", "41" ], [ "4", "31", "35" ], [ "4", "31", "41" ], [ "5", "47", "55" ], [ "5", "47", "61" ], [ "5", "51", "55" ], [ "5", "51", "61" ], [ "6", "19", "36" ], [ "6", "19", "56" ], [ "6", "18", "28" ], [ "6", "18", "48" ], [ "6", "28", "36" ], [ "6", "48", "56" ], [ "7", "20", "32" ], [ "7", "20", "52" ], [ "7", "21", "37" ], [ "7", "21", "57" ], [ "7", "32", "37" ], [ "7", "52", "57" ], [ "8", "22", "29" ], [ "8", "22", "49" ], [ "8", "23", "42" ], [ "8", "23", "62" ], [ "8", "29", "42" ], [ "8", "49", "62" ], [ "9", "25", "43" ], [ "9", "25", "63" ], [ "9", "24", "33" ], [ "9", "24", "53" ], [ "9", "43", "33" ], [ "9", "63", "53" ], [ "10", "27", "44" ], [ "10", "27", "38" ], [ "10", "26", "29" ], [ "10", "26", "28" ], [ "10", "44", "29" ], [ "10", "38", "28" ], [ "11", "31", "45" ], [ "11", "31", "39" ], [ "11", "30", "33" ], [ "11", "30", "32" ], [ "11", "45", "33" ], [ "11", "39", "32" ], [ "12", "35", "39" ], [ "12", "35", "38" ], [ "12", "34", "37" ], [ "12", "34", "36" ], [ "12", "39", "37" ], [ "12", "38", "36" ], [ "13", "41", "44" ], [ "13", "41", "45" ], [ "13", "40", "42" ], [ "13", "40", "43" ], [ "13", "44", "42" ], [ "13", "45", "43" ], [ "14", "46", "48" ], [ "14", "46", "49" ],[ "14", "47", "58" ], [ "14", "47", "64" ], [ "14", "48", "58" ], [ "14", "49", "64" ], [ "15", "50", "53" ], [ "15", "50", "52" ], [ "15", "51", "65" ], [ "15", "51", "59" ], [ "15", "53", "65" ],[ "15", "52", "59" ],[ "16", "54", "57" ],[ "16", "54", "56" ],[ "16", "55", "59" ],[ "16", "55", "58" ],[ "16", "57", "59" ],[ "16", "56", "58" ],[ "17", "60", "62" ],[ "17", "60", "63" ],[ "17", "61", "64" ],[ "17", "61", "65" ],[ "17", "62", "64" ],[ "17", "63", "65" ],[ "39", "31", "35" ],[ "39", "32", "37" ],[ "45", "41", "31" ],[ "45", "43", "33" ],[ "44", "27", "41" ],[ "44", "29", "42" ],[ "38", "35", "27" ],[ "38", "36", "28" ],[ "59", "52", "57" ],[ "59", "51", "55" ],[ "65", "63", "53" ],[ "65", "61", "51" ],[ "64", "53", "62" ],[ "64", "47", "61" ],[ "58", "56", "48" ],[ "58", "55", "47" ],[ "18", "26", "28" ],[ "18", "46", "48" ],[ "22", "26", "29" ],[ "22", "46", "49" ],[ "24", "30", "33" ],[ "24", "50", "53" ],[ "20", "30", "32" ],[ "20", "50", "52" ],[ "23", "40", "42" ],[ "23", "60", "62" ],[ "25", "40", "43" ],[ "25", "60", "63" ],[ "21", "34", "37" ],[ "21", "54", "57" ],[ "19", "34", "36" ],[ "19", "54", "56" ]].do{arg item; item.asInteger};

//define arrays containing coordinates of the loudspeakers for each triplet
x_coordinates = Array.fill(triplet_indices.size,
	{arg i; var pointer_01, pointer_02, pointer_03;
		pointer_01 = triplet_indices[i][0].asInteger;//first triplet index
		pointer_02 = triplet_indices[i][1].asInteger;//second triplet index
		pointer_03 = triplet_indices[i][2].asInteger;//third triplet index
		//store their x coordinates
		[vertices2[0][pointer_01],vertices2[0][pointer_02],vertices2[0][pointer_03]];
	});

y_coordinates = Array.fill(triplet_indices.size,
	{arg i; var pointer_01, pointer_02, pointer_03;
		pointer_01 = triplet_indices[i][0].asInteger;//first triplet index
		pointer_02 = triplet_indices[i][1].asInteger;//second triplet index
		pointer_03 = triplet_indices[i][2].asInteger;//third triplet index
		//store their y coordinates
		[vertices2[1][pointer_01],vertices2[1][pointer_02],vertices2[1][pointer_03]];
	});

z_coordinates = Array.fill(triplet_indices.size,
	{arg i; var pointer_01, pointer_02, pointer_03;
		pointer_01 = triplet_indices[i][0].asInteger;//first triplet index
		pointer_02 = triplet_indices[i][1].asInteger;//second triplet index
		pointer_03 = triplet_indices[i][2].asInteger;//third triplet index
		//store their z coordinates
		[vertices2[2][pointer_01],vertices2[2][pointer_02],vertices2[2][pointer_03]];
	});

inverse_matrices = Array2D.new(triplet_indices.size,9);

for(0, triplet_indices.size-1,
	{arg i; var invmx, invdet, lp1x, lp2x, lp3x, lp1y, lp2y, lp3y, lp1z, lp2z, lp3z;
		invmx = FloatArray.newClear(9);
		lp1x = x_coordinates[i][0];
		lp2x = x_coordinates[i][1];
		lp3x = x_coordinates[i][2];

		lp1y = y_coordinates[i][0];
		lp2y = y_coordinates[i][1];
		lp3y = y_coordinates[i][2];

		lp1z = z_coordinates[i][0];
		lp2z = z_coordinates[i][1];
		lp3z = z_coordinates[i][2];

		invdet = 1.0 / (  (lp1x * ((lp2y * lp3z) - (lp2z * lp3y)))
			- (lp1y * ((lp2x * lp3z) - (lp2z * lp3x)))
			+ (lp1z * ((lp2x * lp3y) - (lp2y * lp3x))));

		invmx[0] = ((lp2y * lp3z) - (lp2z * lp3y)) * invdet;
		invmx[3] = ((lp1y * lp3z) - (lp1z * lp3y)) * invdet.neg;
		invmx[6] = ((lp1y * lp2z) - (lp1z * lp2y)) * invdet;
		invmx[1] = ((lp2x * lp3z) - (lp2z * lp3x)) * invdet.neg;
		invmx[4] = ((lp1x * lp3z) - (lp1z * lp3x)) * invdet;
		invmx[7] = ((lp1x * lp2z) - (lp1z * lp2x)) * invdet.neg;
		invmx[2] = ((lp2x * lp3y) - (lp2y * lp3x)) * invdet;
		invmx[5] = ((lp1x * lp3y) - (lp1y * lp3x)) * invdet.neg;
		invmx[8] = ((lp1x * lp2y) - (lp1y * lp2x)) * invdet;

		for(0,invmx.size-1,{arg j; inverse_matrices[i,j] = invmx[j]});
});


p0 = Array.newClear(3);
p0[0] = 1;
p0[1] = 0;
p0[2] = 0;
"x: % y: % z: % \n".postf(p0[0], p0[1], p0[2]);


big_sm_g = -100000.0;	/* initial value for largest minimum gain value */
best_neg_g_am = 3;		  /* how many negative values in this set */

gains = Array.newClear(3);
temporal_gains = Array.newClear(3);

for(0, triplet_indices.size-1,//for each triplet in coordinates 0:127)
	{arg i; var small_g = 10000000.0, neg_g_am = 3, inv_pointer;
		for(0,2,//run through dimensions
			{arg j;
				temporal_gains[j] = 0.0;
				for(0,2,
					{arg k; var pointer;
						pointer =  3*j + k;
						temporal_gains[j] = temporal_gains[j] + (p0[k]*inverse_matrices[i, pointer]);
				});
				if(temporal_gains[j] < small_g,{small_g = temporal_gains[j];},{});
				if(temporal_gains[j] >= -0.01,{neg_g_am = neg_g_am - 1;},{});
		});

		if((small_g > big_sm_g) && (neg_g_am <= best_neg_g_am),
			{
				//"small_g: % big_sm_g: % neg_g_am: % best_neg_g_am: % \n".postf(small_g, big_sm_g, neg_g_am, best_neg_g_am);
				big_sm_g = small_g;
				best_neg_g_am = neg_g_am;
				winner_set=i;
				winner_set.postln;
				gains[0] = temporal_gains[0];
				gains[1] = temporal_gains[1];
				gains[2] = temporal_gains[2];
				gains.postln;
				//ls[0]= x->x_lsset[i][0]; ls[1]= x->x_lsset[i][1];
				/*if(dim == 3,
					{
						gains[2]=temporal_gains[2];
						//ls[2]= x->x_lsset[i][2];

				},{
						gains[2]=0.0;
						//ls[2]=0;
				});*/

		},{});
});
power =((gains[0]**2) + (gains[1]**2) + (gains[2]**2)).sqrt;
gains[0] = gains[0]/power;
gains[1] = gains[1]/power;
gains[2] = gains[2]/power;
//gains.postln;

//winner_set.postln;
//d'aquest winner set, he de saber quin correspon a cada altaveu lol

channel_gains = Array.fill(66,{0});
for(0,2,{
	arg i; var aux;
	aux = triplet_indices[winner_set][i].asInteger;
	channel_gains[aux] = gains[i];
});
channel_gains.postln;
)

matrix_A1 = [ [ "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00" ], [ "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "1.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "0.000000e+00", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01", "5.000000e-01" ] ].do({arg item; item.asFloat});